# Compiler
Компилятор подмножества языка PASCAL, написанный на языке Си, генерирующий код на языке Assembly на синтаксисе GNU

Подерживаемые типы данных:  
                      VAR:
                            Integer (целочисленный, знаковый, 32-битный)
                            Пример объявления: 
                              VAR int: integer;
                              
                            String  (8-битный) 
                            ?- тип представляет собой массив символов, длина и размер которого равняется 255 без явного указания
                            (Это значение является максимальным для данного типа)
                            Пример объявления: 
                              VAR str1: string; {Длина = 255}
                                  str2: string[30]; {Длина = 30}
                           
                            Array (массив, базовый тип - Integer) 
                            ?- В текущей версии доступны только одномерные целочисленные массивы, индексы которого также являются целочисленными
                            Пример объявления: 
                              VAR array1: array [1..20] of integer;
                                  array2: array [-8..4] of integer;
                      
                      CONST:
                            Доступны строковые и целочисленные константы:
                            Пример объявления: 
                              CONST string_const = 'Hello, friend';
                                    integer_const = 23 + 6 + 1 mod 2;
                                    
Подерживаемые арифметические операции над целыми числами:
                      + - сложение;
                      - - вычитание;
                      * - умножение;
                      MOD - деление с остатком;
                      DIV - целочисленное деление;

Подерживаемые операции сравнения целых чисел (Результат операции 1 при выполнении условия, в противном случае - 0): 
                      <
                      >
                      <=
                      >=
                      <>
                      = (Возможно сравнивать элементы строк)

Подерживаемые логические операции над целыми числами (Результат операции 1 при выполнении условия, в противном случае - 0):   
                      AND 
                      OR
                      (стоит уточнить, что в моей реализации операнды логических операций считаются истиной, если их значение > 0;
                       ложью, если их значение <=0)
                      Пример:
                        flag := 4 and 5; {flag = 1 (TRUE)}
                        flag := -4 and 5; {flag = 0 (FALSE)}
                        flag := -5 and -5; {flag = 0 (FALSE)}
                        
                      Аналогичный принцип вычисления и для команды OR.
                      
Поддерживаемые команды:
                      WRITELN(Выражение_1,...,Выражение_N); - Вывод в консоль.
                      Пример:
                              value := 18;
                              WRITELN('Age = ', value); {Вывод в консоль "Age = 18" и переход на новую строку}
                              
                      READLN(Переменная_1,...,Переменная_N); - Операция ввода.
                      Пример:
                              Var int: integer;
                                  str: string;
                              READLN(int, str);
                              
Поддерживаемые циклы:
                      WHILE <Выражение>
                      BEGIN
                        {Тело цикла}
                      END;
                      
Поддерживаемые команды ветвления:
                      IF <Выражение> THEN
                      BEGIN
                      {.................}
                      END
                      ELSE                 {ELSE и его тело - необязательная часть}
                      BEGIN
                      {.................}
                      END;
                      
Формат чисел: 
              %1000101 - двоичный;
              &175     - восьмиричный;
              24621    - десятичный;
              $13A1F   - шестнадцатеричный. 
                      
Сборка программы: make
Запуск программы: ./compile [ключ] <имя_файла>

Сборка и запуск тестов: через makefile в папке test

Допустимые ключи: 
  --dump-tokens — вывести результат работы лексического анализатора
  --dump-ast    — вывести AST
  --dump-asm    — вывести ассемблер
